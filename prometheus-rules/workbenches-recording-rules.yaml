apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: workbenches-recording-rules
  labels:
    rhoai-monitoring: 'true'
  namespace: redhat-ods-monitoring
spec:
  groups:
    - name: SLOs - Notebook Controller
      rules:
      - expr: |
          1 - min(avg_over_time(probe_success{name=~"notebook-spawner", job="user_facing_endpoints_status_workbenches"}[1d]))
        labels:
          instance: notebook-spawner
        record: probe_success:burnrate1d
      - expr: |
          1 - min(avg_over_time(probe_success{name=~"notebook-spawner",job="user_facing_endpoints_status_workbenches"}[1h]))
        labels:
          instance: notebook-spawner
        record: probe_success:burnrate1h
      - expr: |
          1 - min(avg_over_time(probe_success{name=~"notebook-spawner", job="user_facing_endpoints_status_workbenches"}[2h]))
        labels:
          instance: notebook-spawner
        record: probe_success:burnrate2h
      - expr: |
          1 - min(avg_over_time(probe_success{name=~"notebook-spawner",job="user_facing_endpoints_status_workbenches"}[30m]))
        labels:
          instance: notebook-spawner
        record: probe_success:burnrate30m
      - expr: |
          1 - min(avg_over_time(probe_success{name=~"notebook-spawner", job="user_facing_endpoints_status_workbenches"}[3d]))
        labels:
          instance: notebook-spawner
        record: probe_success:burnrate3d
      - expr: |
          1 - min(avg_over_time(probe_success{name=~"notebook-spawner", job="user_facing_endpoints_status_workbenches"}[5m]))
        labels:
          instance: notebook-spawner
        record: probe_success:burnrate5m
      - expr: |
          1 - min(avg_over_time(probe_success{name=~"notebook-spawner",job="user_facing_endpoints_status_workbenches"}[6h]))
        labels:
          instance: notebook-spawner
        record: probe_success:burnrate6h

    - name: Usage Metrics
      rules:
      - expr: count(kube_statefulset_replicas{namespace=~"rhods-notebooks", statefulset=~"jupyter-nb-.*"})
        record: rhods_total_users
        labels:
          instance: jupyter-notebooks
      - expr: count(kube_statefulset_replicas{namespace=~"rhods-notebooks", statefulset=~"jupyter-nb-.*"} ==1)
        record: rhods_active_users
        labels:
          instance: jupyter-notebooks
      - record: cluster:usage:consumption:rhods:cpu:seconds:rate1h
        expr: sum(rate(container_cpu_usage_seconds_total{container="",pod=~"jupyter-nb.*",namespace="rhods-notebooks"}[1h]))
        labels:
          instance: jupyter-notebooks
      - record: cluster:usage:consumption:rhods:pod:up
        expr: count(kube_pod_container_status_ready{namespace="rhods-notebooks", pod=~"jupyter-nb.*",container=~"jupyter-nb-.*"}==1)
        labels:
          instance: jupyter-notebooks
      - record: cluster:usage:consumption:rhods:active_users
        expr: count(kube_statefulset_replicas{namespace=~"rhods-notebooks", statefulset=~"jupyter-nb-.*"} ==1)
        labels:
          instance: jupyter-notebooks
      - record: cluster:usage:consumption:rhods:cpu_requests_runtime
        expr: sum(kube_pod_container_resource_requests{namespace="rhods-notebooks",resource="cpu", container=~"jupyter-nb-.*"} * on(pod) kube_pod_status_phase{phase="Running", namespace="rhods-notebooks"})
        labels:
          instance: jupyter-notebooks
      - record: cluster:usage:consumption:rhods:cpu_limits_runtime
        expr: sum(kube_pod_container_resource_limits{namespace="rhods-notebooks",resource="cpu", container=~"jupyter-nb-.*"} * on(pod) kube_pod_status_phase{phase="Running", namespace="rhods-notebooks"})
        labels:
          instance: jupyter-notebooks
      
    - name: Availability Metrics
      rules:
      - expr: ((min(probe_success{name=~"rhods-dashboard|notebook-spawner"}) by (name) or on() vector(0)) or label_replace(min(probe_success{name=~"rhods-dashboard|notebook-spawner"}), "name", "combined", "name", ".*"))
        record: rhods_aggregate_availability
        labels:
          instance: jupyter-notebooks